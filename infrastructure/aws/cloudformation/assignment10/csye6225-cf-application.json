{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template",


  "Metadata":{  
    "AWS::CloudFormation::Interface":{  
       "ParameterGroups":[  
          {  
             "Label":{  
                "default":"Web ACL Name for Common Attack Protection"
             },
             "Parameters":[  
                "WebACLName"
             ]
          }
       ],
       "ParameterLabels":{  
          "WebACLName":{  
             "default":"Name"
          }
       }
    }
 },


  "Parameters": {
    "s3AppBucket": {
      "Type": "String",
      "Description": "S3 Bucket to store the attachments"
    },
    "EC2Key": {
      "Type": "String",
      "Description": "Include existing keypair"
    },
    "CertificateArn":{
      "Type":"String"
    },
    "hostedZone":{"Type" : "String"},

    "WebACLName":{  
      "Type":"String",
      "Default":"CommonAttackProtection",
      "Description":"Enter the name you want to use for the WebACL. This value is also added as a prefix for the names of the rules, conditions, and CloudWatch metrics created by this template."
   }

  },
  "Resources": {
    "webserverSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "WebServer",
        "GroupDescription": "Security group for EC2 instance Web server",
        "VpcId": {
          "Fn::ImportValue": "csye6225vpcid"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "csye6225-webapp"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref":"elbSecurityGroup"
           }
          }
        ]
      }
    },

		"myAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{"Fn::ImportValue": "webServer1"},{"Fn::ImportValue": "webServer2"}],
        "LaunchConfigurationName" : { "Ref" : "asgLaunchConfig" },
        "MinSize" : "3",
        "MaxSize" : "10",
				"Cooldown": "60",
				"DesiredCapacity" : "3",
				"TargetGroupARNs":[{"Ref":"myTargetGroup"}],
				"Tags":[{"Key" : "Name", "Value" : "prod-ec2", "PropagateAtLaunch" : "true"},{"Key" : "EC2tagKey","Value" : "EC2tagValue","PropagateAtLaunch" : "true"}]
        }
      },
      "WebServerScaleUpPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {
            "Ref": "myAutoScalingGroup"
          },
          "Cooldown": "60",
          "ScalingAdjustment": "1"
        }
      },
      "WebServerScaleDownPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {
            "Ref": "myAutoScalingGroup"
          },
          "Cooldown": "60",
          "ScalingAdjustment": "-1"
        }
      },
      "CPUAlarmHigh": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "120",
          "EvaluationPeriods": "3",
          "Threshold": "10",
          "AlarmActions": [
            {
              "Ref": "WebServerScaleUpPolicy"
            }
          ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": {
                "Ref": "myAutoScalingGroup"
              }
            }
          ],
          "ComparisonOperator": "GreaterThanThreshold"
        }
      },
      "CPUAlarmLow": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "120",
          "EvaluationPeriods": "3",
          "Threshold": "8",
          "AlarmActions": [
            {
              "Ref": "WebServerScaleDownPolicy"
            }
          ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": {
                "Ref": "myAutoScalingGroup"
              }
            }
          ],
          "ComparisonOperator": "LessThanThreshold"
        }
      },
    "asgLaunchConfig":{
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": "ami-9887c6e7",
				"InstanceType": "t2.micro",
				"IamInstanceProfile": {
					"Ref": "myInstanceProfile"
				},
				"KeyName": {
          "Ref": "EC2Key"
        },
				"AssociatePublicIpAddress": true,
        "SecurityGroups": [{"Ref" : "elbSecurityGroup"}],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe ",
                "sudo su",
                "yum update -y",
                "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                "yum install postgresql.x86_64 -y",
                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                "chmod +x ./install",
                "./install auto",
                "systemctl start ntpd",
                "systemctl enable ntpd",
                "groupadd tomcat",
                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                "cd /tmp",
                "wget http://ftp.naz.com/apache/tomcat/tomcat-8/v8.5.35/bin/apache-tomcat-8.5.35.tar.gz",
                "mkdir /opt/tomcat",
                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                "cd /opt/tomcat",
                "chgrp -R tomcat /opt/tomcat",
                "chmod -R g+r conf",
                "chmod g+x conf",
                "chown -R tomcat webapps/ work/ temp/ logs/",
                "cd /usr/lib/systemd/system",
                "touch tomcat.service",
                "echo '[Unit]' > tomcat.service",
                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                "echo 'After=syslog.target network.target' >> tomcat.service",
                "echo '[Service]' >> tomcat.service",
                "echo 'Type=forking' >> tomcat.service",
                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Dspring.profiles.active=dev -Djava.security.egd=file:/dev/./urandom -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password -Dspring.datasource.url=jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":5432/csye6225 -DbucketName=",
                      {
                        "Ref": "s3AppBucket"
                      },
                      "\"' >> tomcat.service"
                    ]
                  ]
                },
                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                "echo 'User=tomcat' >> tomcat.service",
                "echo 'Group=tomcat' >> tomcat.service",
                "echo 'UMask=0007' >> tomcat.service",
                "echo 'RestartSec=10' >> tomcat.service",
                "echo 'Restart=always' >> tomcat.service",
                "echo '[Install]' >> tomcat.service",
                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                "systemctl daemon-reload",
                "systemctl enable tomcat.service",
                "systemctl start tomcat.service",
                "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                "rpm -U ./amazon-cloudwatch-agent.rpm",
                "cd /opt/aws/amazon-cloudwatch-agent/etc",
                "touch cloudwatch-config.json",
                "echo '{\"agent\":{' >> cloudwatch-config.json",
                "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
                "echo '},' >> cloudwatch-config.json",
                "echo '\"logs\": {' >> cloudwatch-config.json",
                "echo '\"logs_collected\": {' >> cloudwatch-config.json", 
                "echo '\"files\": {' >> cloudwatch-config.json",
                "echo '\"collect_list\": [' >> cloudwatch-config.json", 
                "echo '{\"file_path\": \"/opt/tomcat/logs/catalina.out\",' >> cloudwatch-config.json",
                "echo '\"log_group_name\": \"csye6225_fall2018\",' >> cloudwatch-config.json",
                "echo '\"log_stream_name\": \"webapp\",' >> cloudwatch-config.json",
                "echo '\"timestamp_format\": \"%H:%M:%S %y %b %-d\"' >> cloudwatch-config.json",
                "echo '} ] } },' >> cloudwatch-config.json",
                "echo '\"log_stream_name\": \"cloudwatch_log_stream\"' >> cloudwatch-config.json",
                "echo '},' >> cloudwatch-config.json",
                "echo '\"metrics\":{' >> cloudwatch-config.json",
                "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
                "echo '\"statsd\":{' >> cloudwatch-config.json",
                "echo '\"service_address\":\":8125\",' >> cloudwatch-config.json",
                "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                "echo '\"metrics_aggregation_interval\":0' >> cloudwatch-config.json",
                "echo '}}}}' >> cloudwatch-config.json",
                "touch /tmp/awslogs.conf",
                "echo '[general]' > /tmp/awslogs.conf",
                "echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf",
                "echo '[logstream1]' >> /tmp/awslogs.conf",
                "echo 'file = /opt/tomcat/logs/catalina.out' >> /tmp/awslogs.conf",
                "echo 'log_group_name = csye6225_fall2018' >> /tmp/awslogs.conf",
                "echo 'log_stream_name = webapp' >> /tmp/awslogs.conf",
                "echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf",
                "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-config.json -s",
                "wget https://s3.amazonaws.com/configfileforcloudwatch/amazon-cloudwatch-agent.service",
                "cp amazon-cloudwatch-agent.service /usr/lib/systemd/system/",
                "systemctl enable amazon-cloudwatch-agent.service",
                "systemctl start amazon-cloudwatch-agent.service",
                "service codedeploy-agent start"
              ]
            ]
          }
        }
      }
      },
    "dbserverSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-rds",
        "VpcId": {
          "Fn::ImportValue": "csye6225vpcid"
        },
        "GroupDescription": "Security group for EC2 instance - DB server",
        "Tags": [
          {
            "Key": "Name",
            "Value": "csye6225-rds"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "elbSecurityGroup",
                "GroupId"
              ]
            }
          }
        ]
      }
    },
    "elbSecurityGroup":
    {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "VpcId":{
              "Fn::ImportValue": "csye6225vpcid"
            },
            "Tags": [ {"Key" : "Name", "Value" : "csye-elb"} ],
            "GroupDescription": "Load Balancer firewall rules",
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
              },
              {
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
              },
              {
                "IpProtocol": "tcp",
                "FromPort": "8080",
                "ToPort": "8080",
                "CidrIp": "0.0.0.0/0"
              }
            ]
          }
        },
    "myDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "csye6225",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TimeToLiveSpecification": {
					"AttributeName": "ttl",
    			"Enabled": "TRUE"
				}
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.t2.medium",
        "DBInstanceIdentifier": "csye6225-spring2018",
        "DBName": "csye6225",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "Engine": "postgres",
        "EngineVersion": "10.5",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "dbserverSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "MultiAZ": false,
        "PubliclyAccessible": false
      }
    },
    "myInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Fn::ImportValue": "ec2iamrole"
          }
        ],
        "InstanceProfileName": "myProfile"
      }
    },
    "myCodedeployApp": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-fall2018",
        "ComputePlatform": "Server"
      }
    },
    "myDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "myCodedeployApp"
        },
				"AutoScalingGroups" : [{"Ref" : "myAutoScalingGroup"}],
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": "csye6225-fall2018",
        "Ec2TagFilters": [
          {
            "Key": "EC2-Key",
            "Value": "EC2-Value",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn": {
          "Fn::ImportValue": "codedeployarn"
        }
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "making a RDS subnet from my VPC",
        "SubnetIds": [
          {
            "Fn::ImportValue": "dbsub1"
          },
          {
            "Fn::ImportValue": "dbsub2"
          }
        ]
      }
    },
		"myLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Scheme" : "internet-facing",
        "Subnets" : [{"Fn::ImportValue": "elbSubnet1"},{"Fn::ImportValue": "elbSubnet2"}],
				"SecurityGroups" : [{"Ref" : "elbSecurityGroup"}]
      }
    },
    "myListenerHTTPS" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",

      "Properties" : {
        "DefaultActions" : [{
        "Type" : "forward",
        "TargetGroupArn" : { "Ref" : "myTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "myLoadBalancer" },
        "Port" : "443",
        "Protocol" : "HTTPS",
				"Certificates" : [{"CertificateArn" : {"Ref" : "CertificateArn"}}]
      }
    },
    "myListenerHTTP" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",

      "Properties" : {
        "DefaultActions" : [{
          "RedirectConfig":{
            "Protocol":"HTTPS",
            "StatusCode": "HTTP_301",
            "Port" : "443"
          },
          "Type" : "redirect"
        }],
        "LoadBalancerArn" : { "Ref" : "myLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },
    "myTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 8080,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Fn::ImportValue": "csye6225vpcid"},
        "TargetGroupAttributes": [{
          "Key": "stickiness.enabled",
          "Value": "true"}]
      }
    },

    "MyWebACLAssociation":{  
      "Type":"AWS::WAFRegional::WebACLAssociation",
      "DependsOn":[  
         "myLoadBalancer",
         "MyWebACL"
      ],
      "Properties":{  
         "ResourceArn":{  
            "Ref":"myLoadBalancer"
         },
         "WebACLId":{  
            "Ref":"MyWebACL"
         }
      }
   },
   "MyWebACL":{  
      "Type":"AWS::WAFRegional::WebACL",
      "DependsOn":[  
         "myIPSetRule"
      ],
      "Properties":{  
         "Name":{  
            "Ref":"WebACLName"
         },
         "DefaultAction":{  
            "Type":"ALLOW"
         },
         "MetricName":{  
            "Ref":"WebACLName"
         },
         "Rules":[  
            {  
               "Action":{  
                  "Type":"BLOCK"
               },
               "Priority":1,
               "RuleId":{  
                  "Ref":"ManualIPBlockRule"
               }
            },
            {  
               "Action":{  
                  "Type":"COUNT"
               },
               "Priority":2,
               "RuleId":{  
                  "Ref":"SizeMatchRule"
               }
            },
            {  
               "Action":{  
                  "Type":"BLOCK"
               },
               "Priority":3,
               "RuleId":{  
                  "Ref":"SqliRule"
               }
            },
            {  
               "Action":{  
                  "Type":"BLOCK"
               },
               "Priority":4,
               "RuleId":{  
                  "Ref":"XssRule"
               }
            }
         ]
      }
   },
   "myIPSetRule":{  
      "Type":"AWS::WAFRegional::Rule",
      "DependsOn":[  
         "myIPSetBlacklist"
      ],
      "Properties":{  
         "Name":"myIPSetRule",
         "MetricName":"myIPSetRule",
         "Predicates":[  
            {  
               "DataId":{  
                  "Ref":"myIPSetBlacklist"
               },
               "Negated":false,
               "Type":"IPMatch"
            }
         ]
      }
   },
   "myIPSetBlacklist":{  
      "Type":"AWS::WAFRegional::IPSet",
      "Properties":{  
         "Name":"myIPSetBlacklist",
         "IPSetDescriptors":[  
            {  
               "Type":"IPV4",
               "Value":"155.33.135.0/32"
            },
            {  
               "Type":"IPV4",
               "Value":"155.33.135.0/32"
            }
         ]
      }
   },
   "SqliRule":{  
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "SqliRule"
               ]
            ]
         },
         "MetricName":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "SqliRule"
               ]
            ]
         },
         "Predicates":[  
            {  
               "DataId":{  
                  "Ref":"SqliMatchSet"
               },
               "Negated":false,
               "Type":"SqlInjectionMatch"
            }
         ]
      },
      "Type":"AWS::WAFRegional::Rule"
   },
   "XssRule":{  
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "XssRule"
               ]
            ]
         },
         "MetricName":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "XssRule"
               ]
            ]
         },
         "Predicates":[  
            {  
               "DataId":{  
                  "Ref":"XssMatchSet"
               },
               "Negated":false,
               "Type":"XssMatch"
            }
         ]
      },
      "Type":"AWS::WAFRegional::Rule"
   },
   "SizeMatchRule":{  
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "LargeBodyMatchRule"
               ]
            ]
         },
         "MetricName":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "DetectLargeBody"
               ]
            ]
         },
         "Predicates":[  
            {  
               "DataId":{  
                  "Ref":"sizeRestrict"
               },
               "Negated":false,
               "Type":"SizeConstraint"
            }
         ]
      },
      "Type":"AWS::WAFRegional::Rule"
   },
   "ManualIPBlockRule":{  
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "ManualIPBlockRule"
               ]
            ]
         },
         "MetricName":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "ManualIPBlockRule"
               ]
            ]
         },
         "Predicates":[  
            {  
               "DataId":{  
                  "Ref":"WAFManualIPBlockSet"
               },
               "Negated":false,
               "Type":"IPMatch"
            }
         ]
      },
      "Type":"AWS::WAFRegional::Rule"
   },
   "WAFManualIPBlockSet":{  
      "Properties":{  
         "Name":"Manual IP Block Set"
      },
      "Type":"AWS::WAFRegional::IPSet"
   },
   "sizeRestrict":{  
      "Type":"AWS::WAFRegional::SizeConstraintSet",
      "Properties":{  
         "Name":"sizeRestrict",
         "SizeConstraints":[  
            {  
               "FieldToMatch":{  
                  "Type":"URI"
               },
               "TextTransformation":"NONE",
               "ComparisonOperator":"GT",
               "Size":"512"
            },
            {  
               "FieldToMatch":{  
                  "Type":"QUERY_STRING"
               },
               "TextTransformation":"NONE",
               "ComparisonOperator":"GT",
               "Size":"1024"
            },
            {  
               "FieldToMatch":{  
                  "Type":"BODY"
               },
               "TextTransformation":"NONE",
               "ComparisonOperator":"GT",
               "Size":"10000000"
            },
            {  
               "FieldToMatch":{  
                  "Type":"HEADER",
                  "Data":"cookie"
               },
               "TextTransformation":"NONE",
               "ComparisonOperator":"GT",
               "Size":"4096"
            }
         ]
      }
   },
   "SqliMatchSet":{  
      "Type":"AWS::WAFRegional::SqlInjectionMatchSet",
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "SqliMatch"
               ]
            ]
         },
         "SqlInjectionMatchTuples":[  
            {  
               "FieldToMatch":{  
                  "Type":"URI"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"URI"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"QUERY_STRING"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"QUERY_STRING"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"BODY"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"BODY"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"HEADER",
                  "Data":"cookie"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"HEADER",
                  "Data":"cookie"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            }
         ]
      }
   },
   "XssMatchSet":{  
      "Properties":{  
         "Name":{  
            "Fn::Join":[  
               "",
               [  
                  {  
                     "Ref":"WebACLName"
                  },
                  "XssMatch"
               ]
            ]
         },
         "XssMatchTuples":[  
            {  
               "FieldToMatch":{  
                  "Type":"QUERY_STRING"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"QUERY_STRING"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"BODY"
               },
               "TextTransformation":"URL_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"BODY"
               },
               "TextTransformation":"HTML_ENTITY_DECODE"
            },
            {  
               "FieldToMatch":{  
                  "Type":"URI"
               },
               "TextTransformation":"URL_DECODE"
            }
         ]
      },
      "Type":"AWS::WAFRegional::XssMatchSet"
   },


		"myDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneName" : { "Ref" : "hostedZone" },
         "Comment" : "DNS name for my instance.",
         "Name" : {"Ref":"hostedZone"},
         "Type" : "A",
				 "AliasTarget" : {
					  "DNSName" : {"Fn::GetAtt" : [ "myLoadBalancer", "DNSName" ]},
					  "HostedZoneId" : { "Fn::GetAtt" : ["myLoadBalancer", "CanonicalHostedZoneID"] }
					}
      }

	},
    "myS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "s3AppBucket"
        }
      }
    }
  }
}