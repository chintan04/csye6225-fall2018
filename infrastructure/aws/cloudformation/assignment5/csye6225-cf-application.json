{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template",
  "Parameters": {
    "s3AppBucket": {
      "Type": "String",
      "Description": "S3 Bucket to store the attachments"
    },
    "EC2Key": {
      "Type": "String",
      "Description": "Include existing keypair"
    }
  },
  "Resources": {
    "webserverSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "WebServer",
        "GroupDescription": "Security group for EC2 instance Web server",
        "VpcId": {
          "Fn::ImportValue": "csye6225vpcid"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "csye6225-webapp"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "dbserverSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-rds",
        "VpcId": {
          "Fn::ImportValue": "csye6225vpcid"
        },
        "GroupDescription": "Security group for EC2 instance - DB server",
        "Tags": [
          {
            "Key": "Name",
            "Value": "csye6225-rds"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "webserverSecurityGroup",
                "GroupId"
              ]
            }
          }
        ]
      }
    },
    "myDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "csye6225",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TimeToLiveSpecification": {
					"AttributeName": "ttl",
    			"Enabled": "TRUE"
				}
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.t2.medium",
        "DBInstanceIdentifier": "csye6225-spring2018",
        "DBName": "csye6225",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "Engine": "postgres",
        "EngineVersion": "10.5",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "dbserverSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "MultiAZ": false,
        "PubliclyAccessible": false
      }
    },
    "EC2instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",
        "IamInstanceProfile": {
          "Ref": "myInstanceProfile"
        },
        "ImageId": "ami-9887c6e7",
        "KeyName": {
          "Ref": "EC2Key"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyEC2Instance"
          },
          {
            "Key":"EC2-Key",
            "Value":"EC2-Value"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdm",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": true,
              "VolumeSize": "20"
            }
          },
          {
            "DeviceName": "/dev/sdk",
            "NoDevice": {}
          }
        ],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "webserverSecurityGroup"
              }
            ],
            "SubnetId": {
              "Fn::ImportValue": "csye6225subid"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe ",
                "sudo su",
                "yum update -y",
                "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                "yum install postgresql.x86_64 -y",
                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                "chmod +x ./install",
                "./install auto",
                "systemctl start ntpd",
                "systemctl enable ntpd",
                "groupadd tomcat",
                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                "cd /tmp",
                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                "mkdir /opt/tomcat",
                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                "cd /opt/tomcat",
                "chgrp -R tomcat /opt/tomcat",
                "chmod -R g+r conf",
                "chmod g+x conf",
                "chown -R tomcat webapps/ work/ temp/ logs/",
                "cd /usr/lib/systemd/system",
                "touch tomcat.service",
                "echo '[Unit]' > tomcat.service",
                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                "echo 'After=syslog.target network.target' >> tomcat.service",
                "echo '[Service]' >> tomcat.service",
                "echo 'Type=forking' >> tomcat.service",
                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Dspring.profiles.active=dev -Djava.security.egd=file:/dev/./urandom -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password -Dspring.datasource.url=jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":5432/csye6225 -DbucketName=",
                      {
                        "Ref": "s3AppBucket"
                      },
                      "\"' >> tomcat.service"
                    ]
                  ]
                },
                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                "echo 'User=tomcat' >> tomcat.service",
                "echo 'Group=tomcat' >> tomcat.service",
                "echo 'UMask=0007' >> tomcat.service",
                "echo 'RestartSec=10' >> tomcat.service",
                "echo 'Restart=always' >> tomcat.service",
                "echo '[Install]' >> tomcat.service",
                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                "systemctl daemon-reload",
                "systemctl enable tomcat.service",
                "systemctl start tomcat.service",
                "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                "rpm -U ./amazon-cloudwatch-agent.rpm",
                "cd /opt/aws/amazon-cloudwatch-agent/etc",
                "touch cloudwatch-config.json",
                "echo '{\"agent\":{' >> cloudwatch-config.json",
                "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
                "echo '},' >> cloudwatch-config.json",
                "echo '\"logs\": {' >> cloudwatch-config.json",
                "echo '\"logs_collected\": {' >> cloudwatch-config.json", 
                "echo '\"files\": {' >> cloudwatch-config.json",
                "echo '\"collect_list\": [' >> cloudwatch-config.json", 
                "echo '{\"file_path\": \"/opt/tomcat/logs/catalina.out\",' >> cloudwatch-config.json",
                "echo '\"log_group_name\": \"csye6225_fall2018\",' >> cloudwatch-config.json",
                "echo '\"log_stream_name\": \"webapp\",' >> cloudwatch-config.json",
                "echo '\"timestamp_format\": \"%H:%M:%S %y %b %-d\"' >> cloudwatch-config.json",
                "echo '} ] } },' >> cloudwatch-config.json",
                "echo '\"log_stream_name\": \"cloudwatch_log_stream\"' >> cloudwatch-config.json",
                "echo '},' >> cloudwatch-config.json",
                "echo '\"metrics\":{' >> cloudwatch-config.json",
                "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
                "echo '\"statsd\":{' >> cloudwatch-config.json",
                "echo '\"service_address\":\":8125\",' >> cloudwatch-config.json",
                "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                "echo '\"metrics_aggregation_interval\":0' >> cloudwatch-config.json",
                "echo '}}}}' >> cloudwatch-config.json",
                "touch /tmp/awslogs.conf",
                "echo '[general]' > /tmp/awslogs.conf",
                "echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf",
                "echo '[logstream1]' >> /tmp/awslogs.conf",
                "echo 'file = /opt/tomcat/logs/catalina.out' >> /tmp/awslogs.conf",
                "echo 'log_group_name = csye6225_fall2018' >> /tmp/awslogs.conf",
                "echo 'log_stream_name = webapp' >> /tmp/awslogs.conf",
                "echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf",
                "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",
                "cd /etc/systemd/system",
                "touch awslogs.service",
                "echo '[Unit]' >> awslogs.service",
                "echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service",
                "echo 'After=rc-local.service' >> awslogs.service",
                "echo '[Service]' >> awslogs.service",
                "echo 'Restart=always' >> awslogs.service",
                "echo 'KillMode=process' >> awslogs.service",
                "echo 'TimeoutSec=infinity' >> awslogs.service",
                "echo 'PIDFile=/opt/aws/amazon-cloudwatch-agent/logs/state/awslogs.pid' >> awslogs.service",
                "echo 'ExecStart=/opt/aws/amazon-cloudwatch-agent/bin/start-amazon-cloudwatch-agent --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service",
                "echo '[Install]' >> awslogs.service",
                "echo 'WantedBy=multi-user.target' >> awslogs.service",
                "echo 'sudo su'",
                "systemctl start awslogs.service",
                "systemctl stop awslogs.service",
                "systemctl restart awslogs.service",
                "systemctl enable awslogs.service",
                "service codedeploy-agent start"
              ]
            ]
          }
        }
      }
    },
    "mySNSTopic":
		{
		  "Type" : "AWS::SNS::Topic",
		  "Properties":
		  {

		    "TopicName" : "password_reset",
		    "DisplayName":"password_reset"
		  }


		},
    "myInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Fn::ImportValue": "ec2iamrole"
          }
        ],
        "InstanceProfileName": "myProfile"
      }
    },
    "myCodedeployApp": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-fall2018",
        "ComputePlatform": "Server"
      }
    },
    "myDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "myCodedeployApp"
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentGroupName": "csye6225-fall2018",
        "Ec2TagFilters": [
          {
            "Key": "EC2-Key",
            "Value": "EC2-Value",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn": {
          "Fn::ImportValue": "codedeployarn"
        }
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "making a RDS subnet from my VPC",
        "SubnetIds": [
          {
            "Fn::ImportValue": "dbsub1"
          },
          {
            "Fn::ImportValue": "dbsub2"
          }
        ]
      }
    },
    "myS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "s3AppBucket"
        }
      }
    }
  }
}